.grid {
  display: flex;
  flex-wrap: wrap;
  margin: 0 0 0 (-($spacing-grid / 2));
}

.grid-cell {
  flex: 1;
  padding: 0 0 ($spacing-grid / 2) ($spacing-grid / 2);
}


/**
 * No Guttered
 */
.grid-no-gutters {
  &,
  &:last-child {
    margin: 0;
  }

  > .grid-cell {
    padding: 0;
  }
}


/**
 * Vertical Alignment
 */

// All cells
.grid {
  &.grid-top    { align-items: flex-start; }
  &.grid-middle { align-items: center; }
  &.grid-bottom { align-items: flex-end; }
}

// Per cell
.grid-cell {
  &.grid-top    { align-self: flex-start; }
  &.grid-middle { align-self: center; }
  &.grid-bottom { align-self: flex-end; }
}


/**
 * Responsive and Size modifiers
 */

.grid-cell-shrink {
  flex-basis: auto;
  flex-shrink: 1;
  flex-grow: 0;
}

// By default when in mobile view let's make
// all grid cells go full width. This is
// likely to be the desired behaviour, but
// it can be suppressed with .grid-suppress
@include screenLessThan(sm) {
  .grid:not(.grid-supress) {
    > .grid-cell {
      flex: 0 0 100%;
    }
  }
}

@mixin makeResponsiveGrid($size) {
  @include screenLessThan($size) {
    .grid-cell {
      &.grid-#{$size}-25 { width: 25%; flex: none; }
      &.grid-#{$size}-33 { width: 33.3333%; flex: none; }
      &.grid-#{$size}-50 { width: 50%; flex: none; }
    }

    .grid-#{$size}-fit > .grid-cell {
      flex: 1;
    }

    .grid-#{$size}-full > .grid-cell {
      flex: 0 0 100%;
    }
  }
}

@include makeResponsiveGrid(xs);
@include makeResponsiveGrid(sm);
@include makeResponsiveGrid(md);
@include makeResponsiveGrid(lg);
